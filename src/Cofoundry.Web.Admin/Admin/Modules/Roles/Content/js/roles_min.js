angular.module("cms.roles",["ngRoute","cms.shared"]).constant("_",window._).constant("roles.modulePath","/Admin/Modules/Roles/Js/");
angular.module("cms.roles").config(["$routeProvider","shared.routingUtilities","roles.modulePath",function(e,o,r){o.registerCrudRoutes(e,r,"Role")}]);
angular.module("cms.roles").factory("roles.permissionService",["$http","shared.serviceBase",function(r,e){var s={},n=e+"permissions";return s.getAll=function(e){return r.get(n)},s}]);
angular.module("cms.roles").factory("roles.roleService",["$http","_","shared.serviceBase",function(r,e,t){var n={},u=t+"roles";function o(e){return u+"/"+e}return n.getAll=function(e){return r.get(u,{params:e})},n.getById=function(e){return r.get(o(e))},n.add=function(e){return r.post(u,e)},n.update=function(e){return r.patch(o(e.roleId),e)},n.remove=function(e){return r.delete(o(e))},n}]);
angular.module("cms.roles").factory("roles.userAreaService",["$http","_","shared.serviceBase",function(e,r,a){var s={getAll:function(){return e.get(a+"user-areas")}};return s}]);
angular.module("cms.shared").directive("cmsFormFieldPermissionsCollection",["_","shared.LoadState","roles.modulePath","roles.permissionService",function(d,u,e,a){var p="COMRED";return{restrict:"E",scope:{model:"=cmsModel",globalLoadState:"=cmsGlobalLoadState"},templateUrl:e+"UIComponents/FormFieldPermissionsCollection.html",require:["^^cmsForm"],link:function(e,i,n,t){var o=e,t=t[0];function s(e,i,n){e.permissionType.code===p&&(i.isReadPermitted=e.selected,e.selected||d.each(i.permissions,function(e){e.selected=!1})),n||r()}function r(){var n=[];d.each(o.permissions,function(e){var i;e.selected&&(i={permissionCode:e.permissionType.code},e.entityDefinition&&(i.entityDefinitionCode=e.entityDefinition.entityDefinitionCode),n.push(i))}),o.model=n}function c(){var n;o.permissionGroups&&o.permissionGroups.length&&(n=!(!o.model||!o.model.length),d.each(o.permissionGroups,function(e){d.each(e.permissions,function(i){i.selected=n&&!!d.find(o.model,function(e){return i.uniqueId===m(e.permissionCode,e.entityDefinitionCode)}),s(i,e,!0)})}))}function m(e,i){e="permission"+e;return i&&(e+=i),e}e.$watch("model",function(e,i){c()}),a.getAll().then(function(e){e&&(o.permissions=e,o.permissionGroups=d.chain(o.permissions).groupBy(function(e){return e.entityDefinition?e.entityDefinition.name:"Misc"}).map(function(e,i){var n,n=(n=e,d.find(n,function(e){return e.permissionType.code===p}));return{title:i,isReadPermitted:!n||n.selected,permissions:(e=e,d.sortBy(e,function(e){var i=e.permissionType;switch(e.uniqueId=m(e.permissionType.code,e.entityDefinition?e.entityDefinition.entityDefinitionCode:""),i.code){case"COMRED":return e.isRead=!0,"AAAA1";case"COMMOD":return"AAAA2";case"COMCRT":return"AAAA3";case"COMUPD":return"AAAA4";case"COMDEL":return"AAAA5";default:return i.name}return e.permissionType.code}))}}).sortBy("title").value(),c());o.permissionsLoadState.off()}),o.formScope=t.getFormScope(),o.permissionsLoadState=new u(!0),o.toggleGroup=function(e,i){var n=e.target;d.each(i.permissions,function(e){e.selected=!!n.checked,s(e,i,!0)}),r()},o.permissionChanged=s}}}]);
angular.module("cms.roles").controller("AddRoleController",["$location","shared.LoadState","roles.permissionService","roles.roleService","roles.userAreaService",function(e,o,a,n,r){var t=this;function l(){t.globalLoadState.on(),n.add(t.command).then(s).finally(t.globalLoadState.off)}function d(){s()}function s(){e.path("/")}t.globalLoadState=new o,t.formLoadState=new o(!0),r.getAll().then(function(e){1==(t.userAreas=e).length&&(t.command.userAreaCode=e[0].userAreaCode),t.formLoadState.off()}),t.command={permissions:[]},t.editMode=!1,t.save=l,t.cancel=d}]);
angular.module("cms.roles").controller("RoleDetailsController",["$routeParams","$location","$q","shared.LoadState","shared.modalDialogService","shared.permissionValidationService","roles.roleService","roles.permissionService","roles.modulePath",function(t,e,o,n,i,a,r,l,d){var s=this;function c(){s.editMode=!0,s.mainForm.formStatus.clear()}function u(){p(s.saveLoadState),r.update(s.command).then(function(e){return S().then(s.mainForm.formStatus.success.bind(null,e))}.bind(null,"Changes were saved successfully")).finally(L.bind(null,s.saveLoadState))}function f(){s.editMode=!1,s.command=v(s.role),s.mainForm.formStatus.clear()}function m(){var e={title:"Delete Role",message:"Are you sure you want to delete this role?",okButtonTitle:"Yes, delete it",onOk:function(){return p(),r.remove(s.role.roleId).then(h).catch(L)}};i.confirm(e)}function S(){var e=t.id;return r.getById(e).then(function(e){s.role=e,s.command=v(e),s.editMode=!1})}function v(e){var t=_.pick(e,"roleId","title");return t.permissions=_.map(e.permissions,function(e){var t={permissionCode:e.permissionType.code};return e.entityDefinition&&(t.entityDefinitionCode=e.entityDefinition.entityDefinitionCode),t}),t}function h(){e.path("")}function p(e){s.globalLoadState.on(),e&&_.isFunction(e.on)&&e.on()}function L(e){s.globalLoadState.off(),e&&_.isFunction(e.off)&&e.off()}s.edit=c,s.save=u,s.cancel=f,s.deleteRole=m,s.editMode=!1,s.globalLoadState=new n,s.saveLoadState=new n,s.formLoadState=new n(!0),s.canUpdate=a.canUpdate("COFROL"),s.canDelete=a.canDelete("COFROL"),S().then(L.bind(null,s.formLoadState))}]);
angular.module("cms.roles").controller("RoleListController",["_","shared.LoadState","shared.SearchQuery","shared.urlLibrary","shared.permissionValidationService","roles.roleService",function(r,e,t,a,i,n){var l=this;function o(e){l.isFilterVisible=r.isUndefined(e)?!l.isFilterVisible:e}function s(){o(!1),d()}function d(){return l.gridLoadState.on(),n.getAll(l.query.getParameters()).then(function(e){l.result=e,l.gridLoadState.off()})}l.urlLibrary=a,l.gridLoadState=new e,l.query=new t({onChanged:s}),l.filter=l.query.getFilters(),l.toggleFilter=o,l.canCreate=i.canCreate("COFROL"),l.canUpdate=i.canUpdate("COFROL"),o(!1),d()}]);